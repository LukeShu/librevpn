#!/usr/bin/env bash
#
# lib/lvpn-init
#
# Copyright (c) 2011-2013 LibreVPN <vpn@hackcoop.com.ar>
#
# See AUTHORS for a list of contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation; either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General
# Public License along with this program.  If not, see
# <http://www.gnu.org/licenses/>.
#
#
# Crea un nuevo nodo

. "${LVPN_LIBDIR}"/common

requires tincd

# Opciones
arg_localnets=()   # -l
arg_connectto=()   # -c
arg_addresses=()   # -a
arg_subnets=()     # -s (deprecated)
arg_port=""        # -p
arg_install=false  # -i
arg_subnetup=false # -r (deprecated)
arg_verbose=true   # -q
arg_force=false    # -f
arg_android=false  # -A

# Procesar los flags (ver doc)
while getopts 'dvhirfp:a:c:s:l:A' arg; do
	case $arg in
		h) help $self; exit 0 ;;

		l) arg_localnets+=("$OPTARG") ;;
		a) arg_addresses+=("$OPTARG") ;;
		c) arg_connectto+=("$OPTARG") ;;
		s) arg_subnets+=("$OPTARG") ;;

		p) port="$OPTARG" ;;

		q) arg_verbose=false ;;
		r) arg_subnetup=true ;;
		i) arg_install=true;;
		f) arg_force=true ;;
		A) arg_android=true ;;

		'?') exit 1 ;;
	esac
done ;
let OPTIND--; shift $OPTIND
arg_nodename=${1:-$HOSTNAME}
if [ -z "${arg_nodename}" ]; then
	fatal_error "Se necesita un nombre de nodo"
fi

######################################################################

# Obtener el nombre del host
nodename="$(get_node_name "${arg_nodename}")"

# Podríamos usar get_node_dir pero chequea si ya existe, cosa que no
nodedir="${LVPN_DIR}/nodos/${nodename}"
nodefile="${nodedir}/hosts/${nodename}"
conffile="${nodedir}/tinc.conf"

# Con -f se eliminan los archivos anteriores
if $force; then
	rm -r "${nodefile}" "${nodedir}" || true
fi

$arg_verbose && msg "Creando %s..." "*${nodename}*"
if [ -f "${nodefile}" ]; then
	fatal_error "El nodo ya existe! Utilice -f para re-crearlo"
fi

$arg_verbose && msg "Creando %s..." "*${nodedir}*"
if [ -d "${nodedir}" ]; then
	fatal_error "El directorio del nodo ya existe"
fi

# Crea los directorios de hosts y scripts
mkdir -p ${nodedir}/{hosts,scripts} || fatal_error "No se pudo crear el directorio"

if [ -n "${LVPN_SUBNET}" ]; then
	$arg_verbose && msg "Determinando la IPv4 del nodo..."
	if [ ${#arg_localnets[@]} = 0 ] ; then
		if ! arg_localnets+=($(get_ipv4)); then
			fatal_error "No se pudo determinar una IPv4 para este nodo"
		fi
	fi
fi

$arg_verbose && msg "Generando IPv6..."
arg_localnets+=($(get_ipv6))

# Si se anuncia otra subnet, el nodo actua como router, pero se pierden
# servicios como avahi
if [ ${#arg_subnets[@]} = 0 ]; then
	mode="switch"
else
	mode="router"
fi
$arg_verbose && msg "Este nodo es un %s" "*${mode}*"

######################################################################

$arg_verbose && msg "Generando %s..." "*${nodefile}*"
{
	echo "# ${nodename}"
	get_id

	for address in "${arg_addresses[@]}"; do
		echo "Address = ${address}"
	done
	if [ ${#arg_addresses[@]} = 0 ]; then
		$arg_verbose && warning "El nodo no tiene una dirección pública, se configura como cliente"
		# Cuando no tenemos una dirección pública probablemente estemos detrás
		# de un firewall, esto le indica a los demás nodos que no traten de
		# conectarse directamente sino que nos envíen paquetes a través de un
		# nodo al que estemos conectados.
		echo "IndirectData = yes"

		PORT=$(until test ${r:-0} -gt 20000; do r=${RANDOM}; done; echo $r)
		$arg_verbose && msg "Utilizando puerto al azar %s" "*${PORT}*"
	fi

	echo "Port = ${arg_port:-$PORT}"

	# descubrir nodos en la misma LAN
	echo "LocalDiscovery = yes"

	# Tinc para android necesita especificar la shell con la que se corren los
	# scripts
	if $arg_android; then
		echo "ScriptsInterpreter = /system/bin/sh"
		# Y además el dispositivo tun
		echo "Device = /dev/tun"
	fi

	$arg_verbose && msg "Añadiendo subredes..."
	for subnet in "${arg_localnets[@]}" "${arg_subnets[@]}"; do
		echo "Subnet = ${subnet}"
	done
} > "$nodefile"

$arg_verbose && msg "Generando %s..." "*${conffile}*"
{
	echo "Name = ${nodename}"
	echo "Mode = ${mode}"
	echo "GraphDumpFile = /tmp/${NETWORK}.dot"
} > "$conffile"

$arg_verbose && msg "Añadiendo hosts..."
if [ ${#arg_connectto[@]} -gt 0 ]; then
	${LVPN} connectto "${nodename}" "${arg_connectto[@]}"
fi

# Copiar los scripts de inicio
$arg_verbose && msg "Copiando el resto de archivos..."
if ${arg_android} ; then
	# El sistema por defecto de Android es muy limitado, si no tiene busybox no hay
	# prácticamente nada
	cp "${LVPN_LIBDIR}"/skel/android/tinc-up "${nodedir}"
	# Hardcodear la primera subnet sin notación cidr
	sed -e "s/{{LVPN_SUBNET}}/${localnet%%/*}/g" \
	    -i "${nodedir}/tinc-up"
else
	cp "${LVPN_LIBDIR}"/skel/tinc-{up,down} "${nodedir}"
	sed -e "s,{{LVPN_SUBNET}},${LVPN_SUBNET},g" \
	    -e "s,{{LVPN_SUBNET6}},${LVPN_SUBNET6},g" \
	    -i "${nodedir}/tinc-up"
fi

if ${arg_subnetup} ; then
	cp "${LVPN_LIBDIR}"/skel/subnet-{up,down} "${nodedir}"
fi

$arg_verbose && msg "Generando llaves..."
echo -e "\n" | tincd -c "${nodedir}" --generate-keys=${KEYSIZE}

# Sólo guardar el host si podemos escribir en hosts
if test -w "${LVPN_HOSTS}"; then
	$arg_verbose && msg "Guardando el archivo de host con los demás nodos"
	cp "${nodefile}" "${LVPN_HOSTS}"
fi

cp --force "${LVPN_LIBDIR}/skel/run-script" "${nodedir}/"

if $arg_install; then
	${LVPN} install ${nodename}
fi

msg "El nodo se ha creado con éxito"
msg "*Importante*: "
msg "* Envíe el archivo que representa su nodo a vpn@hackcoop.com.ar (%s), o" "*${nodefile}*"
msg "* Comparta su nodo en la red local con \`lvpn announce\`"
msg "* Agregue %s al repositorio git y publíquelo." "*${nodefile}*"

exit 0
